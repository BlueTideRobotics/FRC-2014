// Nicholas Currault, 1/3/14

#include "WPILib.h"
#include <Ultrasonic.h>
#include <Gyro.h>
#include <CANJaguar.h>

float potentiometerVoltCorrection(float volts)
{
	if (volts < 0)
	{
		return 0.0;
	}
	else if (volts > 4.894)
	{
		return 5.0;
	}
	else
	{
		return volts;
	}
}

float deadZone (float joystickVal)
{
	double size=0.05;
	if(joystickVal<size&&joystickVal>-size)
	{
		return 0;
	}
	else
	{
		return joystickVal;
	}
}

class RobotDemo : public SimpleRobot
{	
	Joystick stick;
	DigitalInput irSensor;
	DigitalInput limitSwitch;

	AnalogChannel sageAsked;
	Ultrasonic ultraSonic;
	
	AnalogChannel potentiometer;
	
	Servo servo;
	
	Gyro gyro;
	
	CANJaguar leftMotor;
	CANJaguar rightMotor;

public: 
	RobotDemo(void):
		stick(1),
		
		irSensor(5),
		limitSwitch(10),
		sageAsked(2),
		ultraSonic(1,2),
		
		potentiometer(3),
		
		servo(10),
		
		gyro(1),
		
		rightMotor(10),
		leftMotor(11)
		
	{
		ultraSonic.SetAutomaticMode(true);
		gyro.Reset();
	}
	
	void Autonomous(void)
	{
	}

	void OperatorControl(void)
	{
		float servoSetVal=0;
		
		
		float voltz;
		double distance=0;
		
		while (IsOperatorControl())
		{
			// Infrared sensor
			SmartDashboard::PutBoolean("IR Sensor",irSensor.Get());
			
			// Limit switch
			SmartDashboard::PutBoolean("Limit Switch", !limitSwitch.Get ());
			
			// Ultrasonic doesn't work
			ultraSonic.Ping();
			// SmartDashboard::PutBoolean("wubz",ultraSonic.IsRangeValid());
			distance = (sageAsked.GetVoltage()*100000)/512; // Sage did this
			distance = distance*(18/33.8); // Convert to inches
			SmartDashboard::PutNumber("Ultra Sonic (inches)", distance);
			// servoSetVal=distance/120;
			
			// Poteniometer is slightly inaccurate towards high and low end
			voltz = potentiometerVoltCorrection(potentiometer.GetAverageVoltage());
			SmartDashboard::PutNumber("Potentiometer (Volts)", voltz);
			SmartDashboard::PutNumber("Potentiometer (Degrees)", (voltz/5)*315);
			
			// Servo
			if (stick.GetRawButton(3)) // Hold down to gradually decrease servo val
			{
				servoSetVal += 0.01;
			}
			if (stick.GetRawButton(2)) // Hold down to gradually increase servo val
			{
				servoSetVal -= 0.01;
			}
			
			if(servoSetVal>1)
			{
				servoSetVal=1;
			}
			else if(servoSetVal<0)
			{
				servoSetVal=0;
			}
			servo.Set(servoSetVal);
			SmartDashboard::PutNumber("Servo",servoSetVal);
			
			// Gyro
			SmartDashboard::PutNumber("Gyro",gyro.GetAngle());
			
			// Left motor
			if (stick.GetRawButton(4))
			{
				leftMotor.Set(1);
			}
			else
			{
				leftMotor.Set(0);
			}
			SmartDashboard::PutNumber("R Motor output-value",leftMotor.Get());
			
			// Right motor
			if (stick.GetRawButton(5))
			{
				rightMotor.Set(1);
			}
			else
			{
				rightMotor.Set(0);
			}
			SmartDashboard::PutNumber("R Motor output-value",rightMotor.Get());
			
			// Right optical encoder
			
			Wait(0.01);
		}
	}
	
	/**
	 * Runs during test mode
	 */
	void Test() {

	}
};

START_ROBOT_CLASS(RobotDemo);

